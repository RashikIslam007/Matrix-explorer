
import java.io.File;
import java.util.List;
import java.util.ArrayList;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Abir
 */
public class table_pract extends javax.swing.JFrame {

    /**
     * Creates new form table_pract
     */
    public table_pract() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        model=new DefaultTableModel();
        table = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        disk_label = new javax.swing.JLabel();
        Total_label = new javax.swing.JLabel();
        Used_label = new javax.swing.JLabel();
        Free_label = new javax.swing.JLabel();
        dis_nam = new javax.swing.JLabel();
        Tot_spa = new javax.swing.JLabel();
        Use_spa = new javax.swing.JLabel();
        free_spa = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jComboBox2 = new javax.swing.JComboBox();
        disk_label1 = new javax.swing.JLabel();
        Total_label1 = new javax.swing.JLabel();
        Used_label1 = new javax.swing.JLabel();
        Free_label1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        dis_nam1 = new javax.swing.JLabel();
        Tot_spa1 = new javax.swing.JLabel();
        Use_spa1 = new javax.swing.JLabel();
        free_spa1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        diret_label = new javax.swing.JLabel();
        directory_path = new javax.swing.JLabel();
        dir_lvl2 = new javax.swing.JLabel();
        dir_path_2 = new javax.swing.JLabel();
        backbuton = new javax.swing.JButton();
        copybut = new javax.swing.JButton();
        pastebut = new javax.swing.JButton();
        delbut = new javax.swing.JButton();
        delbut2 = new javax.swing.JButton();
        RefreshBut1 = new javax.swing.JButton();
        RefBut2 = new javax.swing.JButton();
        Creat_fold = new javax.swing.JButton();
        BackBut2 = new javax.swing.JButton();
        Creatfold2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(model);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size", "Last modified"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tableMouseExited(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C:", "D:", "E:", "F:", "G:", "H:" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        disk_label.setText("Disk Name:");

        Total_label.setText("Total Space:");

        Used_label.setText("Used Space:");

        Free_label.setText("Free Space:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C:", "D:", "E:", "F:", "G:", "H:" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        disk_label1.setText("Disk Name:");

        Total_label1.setText("Total Space:");

        Used_label1.setText("Used Space:");

        Free_label1.setText("Free Space:");

        model1=new DefaultTableModel();

        jTable1.setModel(model1);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size", "Last modified"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTable1MouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        diret_label.setForeground(new java.awt.Color(0, 0, 255));
        diret_label.setText("Directory:");

        directory_path.setForeground(new java.awt.Color(0, 0, 255));

        dir_lvl2.setForeground(new java.awt.Color(0, 0, 255));
        dir_lvl2.setText("Directory:");

        dir_path_2.setForeground(new java.awt.Color(0, 0, 255));

        backbuton.setText("Back");
        backbuton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbutonActionPerformed(evt);
            }
        });

        copybut.setText("Copy");
        copybut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copybutActionPerformed(evt);
            }
        });

        pastebut.setText("Paste");
        pastebut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastebutActionPerformed(evt);
            }
        });

        delbut.setText("Delete");
        delbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delbutActionPerformed(evt);
            }
        });

        delbut2.setText("Delete");
        delbut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delbut2ActionPerformed(evt);
            }
        });

        RefreshBut1.setText("Refresh");
        RefreshBut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBut1ActionPerformed(evt);
            }
        });

        RefBut2.setText("Refresh");
        RefBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefBut2ActionPerformed(evt);
            }
        });

        Creat_fold.setText("mkdir");
        Creat_fold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Creat_foldActionPerformed(evt);
            }
        });

        BackBut2.setText("Back");
        BackBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBut2ActionPerformed(evt);
            }
        });

        Creatfold2.setText("mkdir");
        Creatfold2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Creatfold2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(RefreshBut1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copybut, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delbut, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Creat_fold, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RefBut2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pastebut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delbut2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Creatfold2)
                        .addGap(107, 107, 107))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Used_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Use_spa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Free_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(free_spa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Total_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Tot_spa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(disk_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dis_nam, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(243, 243, 243)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(disk_label1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dis_nam1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Total_label1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Tot_spa1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Used_label1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Use_spa1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Free_label1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(free_spa1)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(backbuton)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(diret_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(directory_path)))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(61, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BackBut2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(dir_lvl2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dir_path_2))))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disk_label)
                    .addComponent(dis_nam)
                    .addComponent(disk_label1)
                    .addComponent(dis_nam1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Total_label)
                    .addComponent(Tot_spa)
                    .addComponent(Total_label1)
                    .addComponent(Tot_spa1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Used_label)
                    .addComponent(Use_spa)
                    .addComponent(Used_label1)
                    .addComponent(Use_spa1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Free_label)
                    .addComponent(free_spa)
                    .addComponent(Free_label1)
                    .addComponent(free_spa1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backbuton)
                    .addComponent(BackBut2))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dir_lvl2)
                        .addComponent(dir_path_2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(diret_label)
                        .addComponent(directory_path)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copybut)
                    .addComponent(pastebut)
                    .addComponent(delbut)
                    .addComponent(delbut2)
                    .addComponent(RefreshBut1)
                    .addComponent(RefBut2)
                    .addComponent(Creat_fold)
                    .addComponent(Creatfold2))
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        model= (DefaultTableModel)table.getModel();
        sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        try{
        if(jComboBox1.getSelectedIndex()==0 ){
        if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
        
        drive_name="C:/";
        ref_path=drive_name;
        directory_path.setText(drive_name);
        f1 =new File("C:/");
         col=f1.list();
        fls=f1.listFiles();
        dis_nam.setText("C");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         
        temp=1;
              // TODO add your handling code here:
       }
       if(jComboBox1.getSelectedIndex()==1){
        //model= (DefaultTableModel)table.getModel();
         
          if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
             drive_name="D:/";
             ref_path=drive_name;
             directory_path.setText(drive_name);
         f1 =new File("D:/");
          col=f1.list();
         fls=f1.listFiles();
         dis_nam.setText("D");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
         
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         temp=1;
              // TODO add your handling code here:
       }
       if(jComboBox1.getSelectedIndex()==2){
        //model= (DefaultTableModel)table.getModel();
          if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
         f1 =new File("E:/");
        
         drive_name="E:/";
         ref_path=drive_name;
         directory_path.setText(drive_name);
         col=f1.list();
         fls=f1.listFiles();
         
         dis_nam.setText("E");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         temp=1;
              // TODO add your handling code here:
       }
       if(jComboBox1.getSelectedIndex()==3){
        if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
           drive_name="F:/";
           ref_path=drive_name;
           directory_path.setText(drive_name);
         f1 =new File("F:/");
         col=f1.list();
         fls=f1.listFiles();
         
         dis_nam.setText("F");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
        
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         temp=1;
              // TODO add your handling code here:
       }
       
       if(jComboBox1.getSelectedIndex()==4){
        //model= (DefaultTableModel)table.getModel();
          if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
         f1 =new File("G:/");
        
         drive_name="G:/";
         ref_path=drive_name;
         directory_path.setText(drive_name);
         col=f1.list();
         fls=f1.listFiles();
         
         dis_nam.setText("G");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         temp=1;
              // TODO add your handling code here:
       }
       if(jComboBox1.getSelectedIndex()==5){
        //model= (DefaultTableModel)table.getModel();
          if(temp==1){
            for(int i=0;i<fls.length;i++)
                 model.removeRow(0);
            path=drive_name;
            lul=0;
        }
         f1 =new File("H:/");
        
         drive_name="H:/";
         ref_path=drive_name;
         directory_path.setText(drive_name);
         col=f1.list();
         fls=f1.listFiles();
         
         dis_nam.setText("H");
        Tot_spa.setText(toString().format("%.02f GB", ((double)f1.getTotalSpace()/1073741824)));
        free_spa.setText(toString().format("%.02f GB", ((double)f1.getFreeSpace()/1073741824)));
        Use_spa.setText(toString().format("%.02f GB",(((double)f1.getTotalSpace()/1073741824)-((double)f1.getFreeSpace()/1073741824))));
         for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
         }
         temp=1;
              // TODO add your handling code here:
       }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Drive doesnt Exist");
        }
       
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:model= (DefaultTableModel)table.getModel();
         model1= (DefaultTableModel)jTable1.getModel();
         sdf1 = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
         try{
        if(jComboBox2.getSelectedIndex()==0 ){
        if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                 model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
        }
        drive_name2="C:/";
        ref_path2=drive_name2;
        copypathhhhhh2=drive_name2;
        f11 =new File("C:/");
        dir_path_2.setText(drive_name2);
        col12=f11.list();
        fls1=f11.listFiles();
        
        dis_nam1.setText("C");
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
         temp1=1;
        
              // TODO add your handling code here:
       }
       if(jComboBox2.getSelectedIndex()==1 ){
        if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
            
        }
        
        f11 =new File("D:/");
        drive_name2="D:/";
        copypathhhhhh2=drive_name2;
        ref_path2=drive_name2;
        dir_path_2.setText(drive_name2);
        fls1=f11.listFiles();
        dis_nam1.setText("D");
        col12=f11.list();
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
         temp1=1;
        
              // TODO add your handling code here:
       }
       if(jComboBox2.getSelectedIndex()==2 ){
        if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                 model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
        }
        
        drive_name2="E:/";
        copypathhhhhh2=drive_name2;
        ref_path2=drive_name2;
        f11 =new File("E:/");
        dir_path_2.setText(drive_name2);
        fls1=f11.listFiles();
        dis_nam1.setText("E");
        col12=f11.list();
        //Tot_spa1.setText(((double)f11.getTotalSpace()/1073741824)+" GB");
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        //free_spa1.setText(((double)f11.getFreeSpace()/1073741824)+" GB");
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        //Use_spa1.setText((((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))+" GB");
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
         temp1=1;
        
              // TODO add your handling code here:
       }
       if(jComboBox2.getSelectedIndex()==3 ){
        if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                 model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
        }
        drive_name2="F:/";
        copypathhhhhh2=drive_name2;
        ref_path2=drive_name2;
        f11 =new File("F:/");
        dir_path_2.setText(drive_name2);
        fls1=f11.listFiles();
        dis_nam1.setText("F");
        col12=f11.list();
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
        temp1=1;
              // TODO add your handling code here:
       }
       if(jComboBox2.getSelectedIndex()==4){
        //model= (DefaultTableModel)table.getModel();
          if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                 model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
        }
         f11 =new File("G:/");
        
         drive_name2="G:/";
         ref_path2=drive_name2;
         dir_path_2.setText(drive_name2);
         col12=f11.list();
         fls1=f11.listFiles();
         
        dis_nam1.setText("G");
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
         temp1=1;
              // TODO add your handling code here:
       }
       if(jComboBox2.getSelectedIndex()==5){
        //model= (DefaultTableModel)table.getModel();
          if(temp1==1){
            for(int i=0;i<fls1.length;i++)
                 model1.removeRow(0);
            path2=drive_name2;
            lul2=0;
        }
         f11 =new File("H:/");
        
         drive_name2="H:/";
         ref_path2=drive_name2;
         dir_path_2.setText(drive_name2);
         col12=f11.list();
         fls1=f11.listFiles();
         
        dis_nam1.setText("H");
        Tot_spa1.setText(toString().format("%.02f GB", ((double)f11.getTotalSpace()/1073741824)));
        free_spa1.setText(toString().format("%.02f GB", ((double)f11.getFreeSpace()/1073741824)));
        Use_spa1.setText(toString().format("%.02f GB",(((double)f11.getTotalSpace()/1073741824)-((double)f11.getFreeSpace()/1073741824))));
         for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
         }
         temp1=1;
              // TODO add your handling code here:
       }
         }catch(Exception e){
             JOptionPane.showMessageDialog(null, "Drive doesnt Exist");
         }
        
              // TODO add your handling code here:
       
       
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
                  // TODO add your handling code here:
        
        model= (DefaultTableModel)table.getModel();
        
        
        if(table.getSelectedRow()!=-1 && active!=0){
            System.out.println("active --  "+active);
            
                track=fls.length;
            if(fls[table.getSelectedRow()].isDirectory()){
            folder_select=table.getSelectedRow();
             System.out.println(folder_select);
             System.out.println(col[folder_select]);
             if (lul==0){
             path=drive_name;
             //push(path);
             f1=new File(path+col[folder_select]);
             copypath=path+col[folder_select];
             ref_path=path+col[folder_select];
             path=drive_name+col[folder_select]+"/";
             push(path);
             }
             else{
               /*  if(b2==1){
                     f1=new File(path);
                     push(path);
                     b2=0;
                 }else{                   
                 */
                 
                 f1=new File(path+col[folder_select]);
                 copypath=path+col[folder_select];
                  ref_path=path+col[folder_select];
                 path=path+col[folder_select]+"/";
                 push(path);
                 //}
             }
             System.out.println(path);
             System.out.println("copypath"+copypath);
             
              fls=f1.listFiles();
              col=f1.list();
              
              System.out.println(track);
             
                 for(int i=0;i<track;i++)
                 model.removeRow(0);
             
             
             for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
             lul=1;
             active=0;
             }
             }else{
               }
            
        
            directory_path.setText(path);
         }
        
        if(table.getSelectedRow()!=-1 && active==0){
            System.out.println("active  "+active);
            active=1;
            if (lul==0){
                cp=drive_name+col[table.getSelectedRow()];
                copy_fold_nam=col[table.getSelectedRow()];
                System.out.println("selected  "+cp);
                System.out.println("Folder name  "+copy_fold_nam);
            }
            else{
                cp=path+col[table.getSelectedRow()];
                copy_fold_nam=col[table.getSelectedRow()];
                 System.out.println("selected  "+cp);
            System.out.println("Folder name  "+copy_fold_nam);
            }
            }
    }//GEN-LAST:event_tableMouseClicked
        
    private void tableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseExited
    public void push(String x){
        stack1[++top]=x;
    }
    public String pop(){
        if(top<0){
            System.out.println("Empty");
            return drive_name;
        }
        else
        return stack1[top--];
    }
    
    public void push2(String x){
        stack2[++top1]=x;
    }
    public String pop2(){
        if(top1<0){
            System.out.println("Empty");
            return drive_name2;
        }
        else
        return stack2[top1--];
    }
    
    
    public static void Copyfiles(File src,File des)throws Exception{
        if(src.isDirectory()){
            if(!des.exists())des.mkdir();
            String filepaths[]=src.list();
            for(String filepath:filepaths){
                File srcfile=new File(src,filepath);
                File desfile=new File(des,filepath);
                Copyfiles(srcfile, desfile);
            }
        }
        else{
            FileInputStream from=null;
            FileOutputStream to=null;
            
            from=new FileInputStream(src);
            to=new FileOutputStream(des);
            byte [] buffer=new byte[4096];
            int bytereads;
            while((bytereads=from.read(buffer))!=-1){
                to.write(buffer,0,bytereads);
            }
            from.close();
            to.close();
        }
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        model1= (DefaultTableModel)jTable1.getModel();
        
        if(jTable1.getSelectedRow()!=-1 && active2!=0){
            track2=fls1.length;
            
            if(fls1[jTable1.getSelectedRow()].isDirectory()){
            folder_select2=jTable1.getSelectedRow();
             System.out.println(folder_select2);
             System.out.println(col12[folder_select2]);
             if (lul2==0){
             path2=drive_name2;
             
             f11=new File(path2+col12[folder_select2]);
             copypathhhhhh2=path2+col12[folder_select2];
             ref_path2=path2+col12[folder_select2];
             path2=drive_name2+col12[folder_select2]+"/";
                 push2(path2);
             }
             else{
                 f11=new File(path2+col12[folder_select2]);
                 copypathhhhhh2=path2+col12[folder_select2];
                 ref_path2=path2+col12[folder_select2];
                 path2=path2+col12[folder_select2]+"/";
                 push2(path2);
             }
             
             System.out.println(path2);
             System.out.println("Copypath2:"+copypathhhhhh2);
             
              fls1=f11.listFiles();
              col12=f11.list();
              
              System.out.println(track2);
             System.out.println(fls1.length);
                 for(int i=0;i<track2;i++)
                 model1.removeRow(0);
             
             
             for(int j=0;j<fls1.length;j++){
             model1.addRow(new Object[]{fls1[j].getName(),fls1[j].length(),sdf1.format(fls1[j].lastModified()) });
            lul2=1;
            active2=0;
           
              }
        }                                  
        }
        else{
            
        }
        if(jTable1.getSelectedRow()!=-1 && active2==0){
            System.out.println("active  "+active2);
            active2=1;
            if (lul2==0){
                cp2=drive_name2+col12[jTable1.getSelectedRow()];
                copy_fold_nam2=col12[jTable1.getSelectedRow()];
                System.out.println("selected  "+cp2);
                System.out.println("Folder name  "+copy_fold_nam2);
            }
            else{
                cp2=path2+col12[jTable1.getSelectedRow()];
                copy_fold_nam2=col12[jTable1.getSelectedRow()];
                 System.out.println("selected  "+cp2);
            System.out.println("Folder name  "+copy_fold_nam2);
            }
        }
            dir_path_2.setText(path2);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseExited

    private void backbutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbutonActionPerformed
        // TODO add your handling code here:
        model= (DefaultTableModel)table.getModel();
        
            if(backactive==2){
            track=fls.length;
            
             poping=pop();
             f1=new File(poping);
             
              fls=f1.listFiles();
              col=f1.list();
              
              System.out.println("Back Direction:"+poping);
             
                 for(int i=0;i<track;i++)
                 model.removeRow(0);
                 
             if(poping.equals(drive_name))lul=0;
             else{ lul=1;
             path=poping;
             }
             for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
            
           active=0;
           b2=1;
             }
             }
             if(backactive==0){
          pop();
          backactive=2;
             }
              
                directory_path.setText(poping);
            
        
        
    }//GEN-LAST:event_backbutonActionPerformed

    private void copybutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copybutActionPerformed
        // TODO add your handling code here:
        cpy_path_fin=cp;
        cpy_fold_fin=copy_fold_nam;
        JOptionPane.showMessageDialog(null,cpy_fold_fin+" Copied on the clipboard");
    }//GEN-LAST:event_copybutActionPerformed
    public static void passpath(String s,String to,String cpy)throws Exception{
        List<File> directories=new ArrayList<File>();
        String dir=to+"/"+cpy;
        System.out.println("DIR: "+dir);
             
        
        directories.add(new File(dir));
        Copyfiles(new File(s),new File( dir));
    }
    private void pastebutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastebutActionPerformed
        System.out.println("to: "+copypathhhhhh2);
        try {
            passpath(cpy_path_fin, copypathhhhhh2,cpy_fold_fin);
        } catch (Exception ex) {
            //Logger.getLogger(table_pract.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"No file found");
        }
    }//GEN-LAST:event_pastebutActionPerformed

    private void delbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delbutActionPerformed
        // TODO add your handling code here:
        try{
        table_pract d=new table_pract();
        File delg=new File(cp);
        System.out.println(delg.isDirectory());
        if(delg.isDirectory()){
        d.deletefolder(cp);
         }else{
            delg.delete();
            }
        JOptionPane.showMessageDialog(null,"File Deleted..please press refresh");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"You didnt select a file");
        }
    }//GEN-LAST:event_delbutActionPerformed

    private void delbut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delbut2ActionPerformed
        // TODO add your handling code here:
        try{
        table_pract d=new table_pract();
        File delg=new File(cp2);
        System.out.println(delg.isDirectory());
        if(delg.isDirectory()){
        d.deletefolder2(cp2);
         }else{
            delg.delete();
            }
        JOptionPane.showMessageDialog(null,"File Deleted..please press refresh");
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(null,"You didnt select a file");
        }
    }//GEN-LAST:event_delbut2ActionPerformed

    private void RefreshBut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBut1ActionPerformed
        // TODO add your handling code here:
        model= (DefaultTableModel)table.getModel();
        
        
       
            
                track=fls.length;
            
           f1=new File(ref_path);
           fls=f1.listFiles();
           col=f1.list();
           for(int i=0;i<track;i++)
                 model.removeRow(0);
           
           for(int i=0;i<fls.length;i++){
             model.addRow(new Object[]{fls[i].getName(),fls[i].length(),sdf.format(fls[i].lastModified()) });
             
             }
              if(ref_path.equals(drive_name))
                         lul=0;
              else{
                  lul=1;
             
              //path=ref_path;
              }
              active=0;
              value=1;
        
    }//GEN-LAST:event_RefreshBut1ActionPerformed

    private void RefBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefBut2ActionPerformed
        // TODO add your handling code here:
        model1= (DefaultTableModel)jTable1.getModel();
        
        
       
            try{
            track2=fls1.length;
            
           f11=new File(ref_path2);
           fls1=f11.listFiles();
           
           for(int i=0;i<track2;i++)
                 model1.removeRow(0);
           
           for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
             
             }
              if(ref_path2.equals(drive_name2))
                         lul2=0;
              else
                  lul2=1;
             active2=0;
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error...Plz Restart the programm");
            }
                    
    }//GEN-LAST:event_RefBut2ActionPerformed

    private void Creat_foldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Creat_foldActionPerformed
        // TODO add your handling code here:
        //List<File> directorie=new ArrayList<File>();
        String fn=JOptionPane.showInputDialog("Enter Folder name:");
         String ph;
        if(lul==0){
             ph=drive_name+fn;
         }
         else ph=path+fn; 
         File lp=new File(ph);
         lp.mkdir();
         System.out.println("Creat folder at "+ph);
        //directorie.add(new File(ph));
        //value=1;
         JOptionPane.showMessageDialog(null,"File Created...Please refresh");
    }//GEN-LAST:event_Creat_foldActionPerformed

    private void BackBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBut2ActionPerformed
        // TODO add your handling code here:
        model1= (DefaultTableModel)jTable1.getModel();
        
            if(backactive2==2){
            track=fls1.length;
            
            poping2=pop2();
             f11=new File(poping2);
             
              fls1=f11.listFiles();
              col12=f11.list();
              
              System.out.println("Back Direction:"+poping2);
             
                 for(int i=0;i<track;i++)
                 model1.removeRow(0);
                 
             if(poping2.equals(drive_name2))lul2=0;
             else{ lul2=1;
             path2=poping2;
             }
             for(int i=0;i<fls1.length;i++){
             model1.addRow(new Object[]{fls1[i].getName(),fls1[i].length(),sdf1.format(fls1[i].lastModified()) });
            
           active2=0;
           //b2=1;
             }
             }
             if(backactive2==0){
          pop2();
          backactive2=2;
             }
              
                dir_path_2.setText(poping2);
            
    }//GEN-LAST:event_BackBut2ActionPerformed

    private void Creatfold2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Creatfold2ActionPerformed
        // TODO add your handling code here:
        String fn=JOptionPane.showInputDialog("Enter Folder name:");
         String ph;
         if(lul2==0)ph=drive_name2+fn;
         else
            ph=path2+fn; 
         
         File lp=new File(ph);
         lp.mkdir();
         System.out.println("Creat folder at "+ph);
        //directorie.add(new File(ph));
        //value=1;
         JOptionPane.showMessageDialog(null,"File Created...Please refresh");
    }//GEN-LAST:event_Creatfold2ActionPerformed
    
    public void deletefolder2(String s){
        String pathname=s+"/";
        System.out.println("deletign "+pathname);
        File f=new File(pathname);
        
        try{
            if(f.exists()){
                if(f.isDirectory()){
                   File[] list=f.listFiles();
                   for(File fu:list){
                      
                              fu.delete();
                      }
                      
                   f.delete();
                }
               
            }
        }catch(Exception e){
            
        }
    }
    
    public void deletefolder(String s){
        String pathname=s+"/";
        System.out.println("deletign "+pathname);
        File f=new File(pathname);
        
        try{
            if(f.exists()){
                if(f.isDirectory()){
                   File[] list=f.listFiles();
                   for(File fu:list){
                       fu.delete();
                   }
                   f.delete();
                }
            }
        }catch(Exception e){
            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(table_pract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(table_pract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(table_pract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(table_pract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new table_pract().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBut2;
    private javax.swing.JButton Creat_fold;
    private javax.swing.JButton Creatfold2;
    private javax.swing.JLabel Free_label;
    private javax.swing.JLabel Free_label1;
    private javax.swing.JButton RefBut2;
    private javax.swing.JButton RefreshBut1;
    private javax.swing.JLabel Tot_spa;
    private javax.swing.JLabel Tot_spa1;
    private javax.swing.JLabel Total_label;
    private javax.swing.JLabel Total_label1;
    private javax.swing.JLabel Use_spa;
    private javax.swing.JLabel Use_spa1;
    private javax.swing.JLabel Used_label;
    private javax.swing.JLabel Used_label1;
    private javax.swing.JButton backbuton;
    private javax.swing.JButton copybut;
    private javax.swing.JButton delbut;
    private javax.swing.JButton delbut2;
    private javax.swing.JLabel dir_lvl2;
    private javax.swing.JLabel dir_path_2;
    private javax.swing.JLabel directory_path;
    private javax.swing.JLabel diret_label;
    private javax.swing.JLabel dis_nam;
    private javax.swing.JLabel dis_nam1;
    private javax.swing.JLabel disk_label;
    private javax.swing.JLabel disk_label1;
    private javax.swing.JLabel free_spa;
    private javax.swing.JLabel free_spa1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    DefaultTableModel model1;
    private javax.swing.JButton pastebut;
    public javax.swing.JTable table;
    DefaultTableModel model;
    // End of variables declaration//GEN-END:variables
      public File f1;
      public File fls[];
      public int temp=0;
      public File f11;
      public File fls1[];
      public int temp1=0;
      public SimpleDateFormat sdf;
      public SimpleDateFormat sdf1;
      public int folder_select;
      public int folder_select2;
      public String col[];
      public String col1[];
      public String col12[];
       public String col122[];
      public String drive_name;
      public String drive_name2;
      
      public File f3;
      public File f3lis[];
      public int lul=0;
      public int lul2=0;
       public int track;
       public int track2;
       public String path;
       public String path2;
       public int top=-1;
       public String stack1[]=new String[10];
       public String copypath;
       public String copypathhhhhh;
       public String copypathhhhhh2;
       public String cp;
        public String cp2;
       
       public String copyyyyyyy;
       public int active;
       public int backactive;
       public int b2;
       public String copy_fold_nam;
       public String copy_fold_nam2;
       public int active2;
       public String ref_path;
       public String ref_path2;
       public  String cpy_path_fin;
       public  String cpy_fold_fin;
       public int value;
       public int backactive2;
       public String stack2[]=new String[10];
       public int top1=-1;
       public String poping;
       public  String poping2 ;

}
